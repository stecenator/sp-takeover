#!/usr/bin/env python3
"""
sp-takeover - Przełącza instancję IBM Spectrum Protect ze zdalnego hosta/ośrodka na biężący host. 
"""
import sys
import re
import configparser
import socket
import paramiko
import os
from optparse import OptionParser
from os.path import isfile
from os import access, R_OK, system

# Klasy, funkcje pomocniczne i zmienne pomocnicze
class TxColors:
	""" Terminal color const definition. """
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	RED = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

DEBUG=False
VERBOSE=False

SITE="none"		# Do indeksowania obiektu config

def dbg(facility, message):
	""" Wypisuje \"facility:\tmesage\" jezeli program jest wywołany z opcją -d lub --debug."""
	if DEBUG:
		print(f"{TxColors.WARNING}{facility}:{TxColors.ENDC}\t{message}")

def verb(message):
	""" Wypisuje mesage, jezeli program jest wywołany z opcją -v lub --verbose."""
	if VERBOSE:
		print(f"{TxColors.OKGREEN}{message}{TxColors.ENDC}")

def err(facility, message):
	""" Wypisuje na stderr komunikat \"facility:\tmesage\". """
	print(f"{TxColors.FAIL}{facility}:{TxColors.ENDC}\t{message}", file=stderr)

def status_msg(message):
	""" Wypisuje message bez nowej linii. Daje możliwość wpisania dodtkowego kolorowego statusu npr prt_red lub prt_green """
	print(message, end='')

def prt_red(message):
	""" Wypisuje message na czerwono."""
	print(f"{TxColors.RED}{message}{TxColors.ENDC}")

def prt_green(message):
	""" Wypisuje message na czerwono."""
	print(f"{TxColors.OKGREEN}{message}{TxColors.ENDC}")

# Funkcje programu

def read_config(cfgFile):
	""" Tworzy konfigurację z pliku config.ini albo innego podanego po -i|--config."""
	dbg("read_config", f"Sprawdzanie dostępności pliku {cfgFile}.")
	assert isfile(cfgFile) and access(cfgFile, R_OK), f"Nie można odczytać pliku {cfgFile}."
	cfg = configparser.ConfigParser()
	cfg.read(cfgFile)
	dbg("read_config", f"Przeczytano {cfgFile}. Sekcje:")
	if DEBUG:
		sections = cfg.sections()
		print(sections)
		site = cfg['DEFAULT']['localsite'].lower()	# bo sekcje i klucze są składowane przez obiek cfg jako lowercase
		print(f"Site: {site}")
		for key in cfg[site]:
			print(f"{key} :\t{cfg[site][key]}")

	return cfg

def is_host_alive(host, user="", passwd="", use_ping=True):
	""" Sprawdza pingiem czy shot działa, poteam sprawdza, czy możę się tam dostać po ssh."""
	host_status = False
	alive = 0

	dbg("is_host_alive", f"Pingowanie hosta {host}...")
	if(use_ping):
		alive = os.system("ping -c 3 " + host + " >/dev/null 2>&1")
	else:
		# Udaję, że ping się powiódł
		alive = 0

	if alive == 0:
		dbg("is_host_alive", f"{host}\tŻyje!. Proba logowania po ssh...")
		ssh = paramiko.SSHClient()
		try:
			ssh.load_system_host_keys()
			ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
			ssh.connect(hostname=host, username=user, password=passwd)
		except BadHostKeyException:
			err("is_host_alive", f"Coś nie tak z kluczem hosta {host}.")
			host_status = False
		except AuthenticationException:
			err("is_host_alive", f"Użyszkodnik {user}, hasło albo klucz nie pasują do {host}.")
			host_status = False
		except SSHException:
			err("is_host_alive", f"ssh stroi jakieś inne fochy.")
			host_status = False
		except socket.error:
			err("is_host_alive", f"Python stroi jakieś inne fochy.")
			host_status = False

		dbg("is_host_alive", f"Udało się nawiązać sesję SSH z {host}.")
		ssh.close()
		host_status = True

	else:
		dbg("is_host_alive", f"{host} nie pinguje. Trup!")
		host_status = False

	return host_status

def validate_env(cfg):
	""" Weryfikuje wszystkie ustawienia na podstawie globalnej zmiennej config utworzenej przez read_config."""

	cfg_valid = True 	# Czasem wiadomo, że na pewno jest źle, ale sprawdzam dalej, żeby wyłapać pozostałe błędy. 

	dbg("validate_env", f"Weryfikacja środowiska.")
	site = cfg['DEFAULT']['localsite'].lower()
	verb(f"Sprawdzanie konfiguracji dla site: {site}.")

	status_msg("Czy ja to ja?...\t")
	if( os.uname().nodename == cfg[site]['me']):
		prt_green("Tak")
	else:
		prt_red("Nie")
		dbg("validate_env", f"Mój hostname {os.uname().nodename}, Według konfigu: {cfg[site]['me']}")
		cfg_valid = False

	status_msg(f"Host: {cfg[site]['peer']} dostępny...")
	dbg("validate_env", f"SSH: {cfg[site]['peer']}, {cfg[site]['peeruser']}, {cfg[site]['peerpass']}")
	if is_host_alive(cfg[site]['peer'], cfg[site]['peeruser'], cfg[site]['peerpass'], cfg[site].getboolean('useping')):
		prt_green("Tak")
	else:
		prt_red("Nie")

	return cfg_valid
# MAIN

use = "Usage: %prog  [-f|--force] [-c|--check] [-d|--debug] [-v|--verbose]"

parser = OptionParser(usage=use)
parser.add_option("-f", "--force", action="store_true", dest="force", help="Forsuje przełączenie na niezsynchronizowanych macierzach.", default=False)
parser.add_option("-c", "--check", action="store_true", dest="validate", help="Sprawdza poprawność konfiguracji środowiska.", default=False)
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Zwiększa gadatliwość.", default=False)
parser.add_option("-d", "--debug", action="store_true", dest="debug", help="Jeszcze bardziej zwiększa gadatliwość.", default=False)
parser.add_option("-i", "--config", action="store", type="string", dest="cfgFile", help="Plik konfiguracyjny.", default="config.ini")

(options, args) = parser.parse_args()
VERBOSE = options.verbose
DEBUG = options.debug


dbg("MAIN", "Opcje wywołania programu (z domyślnymi):")
dbg("MAIN", f"Debug:\t{options.debug}")
dbg("MAIN", f"Forsowanie:\t{options.force}")
dbg("MAIN", f"Weryfikacja środowiska:\t{options.validate}")
dbg("MAIN", f"Gadatliwie:\t{options.verbose}")
dbg("MAIN", f"Konfig:\t{options.cfgFile}")

# Odczyt konfiguracji i parsowanie 
config = read_config(options.cfgFile)	
SITE = config['DEFAULT']['localsite'].lower()		# Bo przyda się do odczytu pozostałuch kluczy z config.ini

verb("Weryfikacja Środowiska.")
cfg_valid = validate_env(config)
if options.validate:
	exit